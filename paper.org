* Title
* Abstract
* Introduction

It is acknowledged amongst researchers and practicioners alike that functional programming techniques improve both the initial quality of a codebase and process of iterative refactoring and improvement over time [citation needed]. Less generally accepted are claims that functional programming has these same benefits for the specific case of concurrent programs with tight timing requirements; researchers tend to think so [citation needed], but the jury appears to be out for practitioners [citation needed, if possible]. Our experiences using GHC Haskell and particularly its STM [do we need to expand this acronym?] paradigm have led us to definitely vote yes on the question.



* P1
** Introduce the problem domain single-trode
** High-level overview of the final model
** Intuitive, iterative process
Example of an iteration?
* P2
** Move to multiple streams: Need to develop a parallelism story
** STM let us write it naturally
*** Let us think in small parts without needing to keep track of the whole
* P3
** Performance issues with naive approach
*** Memory usage
*** Low framerate
*** Thread starvation?
** Diagnosis:
*** Growing amount of heap space taken by specific values without bound
*** Suspected laziness issues
** Minimum machine performance required to avoid stuttering as GC catches up
** Still slow degredation of performance over time
** Not sure exactly what was happening or why the fixes worked
* Conclusion
