* Title
* Abstract
* Introduction
  
Functional programming techniques greatly improve the likelihood of a codebase working properly the first time and across refactorings - a fact recognized by both researchers and practicioners. Claims that functional programming can improve the experience of refactoring concurrent programs with tight timing requirements tend to be more common among academics; it remains to be seen whether practicitioners can realize the promised benefits. After adopting GHC Haskell as both implementation language and runtime for our real-time neural data processing system, we can give answer the question with a definitive yes.



* P1
** Introduce the problem domain single-trode
** High-level overview of the final model
** Intuitive, iterative process
Example of an iteration?
* P2
** Move to multiple streams: Need to develop a parallelism story
** STM let us write it naturally
*** Let us think in small parts without needing to keep track of the whole
* P3
** Performance issues with naive approach
*** Memory usage
*** Low framerate
*** Thread starvation?
** Diagnosis:
*** Growing amount of heap space taken by specific values without bound
*** Suspected laziness issues
** Minimum machine performance required to avoid stuttering as GC catches up
** Still slow degredation of performance over time
** Not sure exactly what was happening or why the fixes worked
* Conclusion
